FUNCTION find_index,y,x

i=where(abs(y-x) lt 1e-8)
if i ne -1 then begin
i=[i,i]
endif else begin

u=where(y gt x)
if u(0) ne -1 then u=u(0)
l=where(y lt x)
if l(0) ne -1 then l=l(n_elements(l)-1)

if u(0) eq -1 or l(0) eq -1 then begin
i=-1
endif else begin
i=[l,u]
i=i(sort(i))
endelse
endelse

return,i

END

FUNCTION iron_nlte,e,t,g,f,x,w,al=al,silent=silent

; NAME:
;       iron_nlte
;
; PURPOSE:
;       to determine non-LTE and LTE abundance for given equivalent width 
;       of neutral iron by linear interpolation
; 
; CALLING SEQUENCE:
;       a=iron_nlte(e,t,g,f,x,w,/al)
;
; INPUTS: 
;
;       e          [0.1,500]       Equivalent width [pm] (optional)
;       t          [4000.0,8000.0] Effective temperature [K]
;       g          [1.0,5.0]       Logarithm of surface gravity [cgs] 
;       f          [-5.0,0.5]      Metallicity [Fe/H]
;       x          [1,5]           Microturbulence [km/s]      
;       w          [0,3345]        Line index
;     
;       al         [0,1]           Flag for LTE abundance. If
;       keyword is set, the equivalent width (e) is treated as output
;       If flag is not set, f is ignored.
; 
; OUTPUTS:
;       a(0)       LTE abundance  (same as al)
;       a(1)       NLTE abundance 
;       a(2)       a(1)-a(0)                                     
;
;                  If parameters are outside the allowed range -9 is returned
;                     
;
; 
;  Written 05.11.2010 by Karin Lind, Max Planck Institute for Astrophysics
;  email: klind@mpa-garching.mpg.de
;
;

;Grid variables communicated through common block
@/data1/data1/MULTI2.3/FEgrid/nlte_common

;Check that all parameters are given

if(n_params() ne 6) then begin
  print,' CALLING SEQUENCE:                                                    '
  print,'       a=iron_nlte(e,t,g,f,x,w,/al)                                   '
  print,'                                                                      '
  print,' INPUTS:                                                              '
  print,'                                                                      '
  print,'       e          [0.1,500]       Equivalent width [pm] (optional)    '
  print,'       t          [4000.0,8000.0] Effective temperature [K]           '
  print,'       g          [1.0,5.0]       Logarithm of surface gravity [cgs]  '
  print,'       f          [-5.0,0.5]      Metallicity [Fe/H] (LTE)            '
  print,'       x          [1,5]           Microturbulence [km/s]              '
  print,'       w          [0,3345]        Line index                          '
  print,'                                                                      '
  print,'       al         [0,1]           If flag is set, f is fixed and e    '
  print,'                                  returned (optional)                 '
  return,[-9,-9,-9]
endif

mg=fg+7.45 & f=f+7.45

;Find index in arrays
ti=find_index(tg,t) 
gi=find_index(gg,g) 
xi=find_index(xg,x) 
li=w

if not keyword_set(silent) then print,wv(li),el(li),alog10(gf(li)),format="('Using calculations for ',f8.3,'nm  EV_low=',f7.3,'eV  log(gf)=',f7.3)"

;Check that parameters are inside allowed range
if not keyword_set(al) then begin
if e lt 0.1 or e gt 100. then begin
   if not keyword_set(silent) then  print,'Equivalent width outside range'
  return,[-9,-9,-9]
endif
endif
 
if ti(0) eq -1 then begin
   if not keyword_set(silent) then  print,'Effective temperature outside range'
  return,[-9,-9,-9]
endif

if li(0) lt 0 or li(0) gt 3345 then begin
   if not keyword_set(silent) then  print,'Line index outside range'
  return,[-9,-9,-9]
endif

if gi(0) eq -1 then begin
   if not keyword_set(silent) then  print,'Surface gravity outside range'
  return,[-9,-9,-9]
endif

if xi(0) eq -1 then begin
   if not keyword_set(silent) then  print,'Microturbulence outside range'
  return,[-9,-9,-9]
endif

if t gt 6500. and g lt 3.0 then begin
   if not keyword_set(silent) then  print,'Minimum logg=3.0 for Teff>6500K'
  return,[-9,-9,-9]
endif   

if t gt 5500. and g lt 2.0 then begin
   if not keyword_set(silent) then  print,'Minimum logg=2.0 for Teff>5500K'
  return,[-9,-9,-9]
endif

if x gt 2 and g gt 3.0 then begin
   if not keyword_set(silent) then  print,'Maximum microturbulence=2.0 for logg>3.0'
  return,[-9,-9,-9]
endif

sl=wl([ti(0),ti(1)],[gi(0),gi(1)],*,[xi(0),xi(1)],li)
sn=wn([ti(0),ti(1)],[gi(0),gi(1)],*,[xi(0),xi(1)],li)
nr=n_elements(mg)

;Check if all entries are -9
if max([sl,sn]) eq -9 then begin
outofrange:
   if not keyword_set(silent) then print,'Model missing from grid or not enough data points'
   return,[-9,-9,-9]
endif

;Remove -9 entries 
dum=0
for i=0,nr-1 do begin
if min([sl(*,*,0,*),sn(*,*,0,*)]) eq -9 then begin
if dum ge nr-2 then goto,outofrange 
sl=sl(*,*,1:nr-dum-1,*)
sn=sn(*,*,1:nr-dum-1,*)
mg=mg(1:nr-dum-1)
dum=dum+1
endif
if min([sl(*,*,nr-dum-1,*),sn(*,*,nr-dum-1,*)]) eq -9 then begin
if dum ge nr-2 then goto,outofrange 
sl=sl(*,*,0:nr-dum-2,*)
sn=sn(*,*,0:nr-dum-2,*)
mg=mg(0:nr-dum-2)
dum=dum+1
endif
endfor
nr=nr-dum
fi=find_index(mg,f) 

if fi(0) eq -1 then begin
   if not keyword_set(silent) then  print,'Metallicity outside range'
   return,[-9,-9,-9]
endif

;Interpolate in effective temperature x8
tl=fltarr(2,nr,2)
tn=fltarr(2,nr,2)
if ti(1) eq ti(0) then l=0 else l=(t-tg(ti(0)))/(tg(ti(1))-tg(ti(0)))
for k=0,1 do begin
for m=0,1 do begin
tl(k,*,m)=sl(0,k,*,m)+l*(sl(1,k,*,m)-sl(0,k,*,m))
tn(k,*,m)=sn(0,k,*,m)+l*(sn(1,k,*,m)-sn(0,k,*,m))
endfor
endfor

;Interpolate in surface gravity x4
gl=fltarr(nr,2)
gn=fltarr(nr,2)
if gi(1) eq gi(0) then l=0 else l=(g-gg(gi(0)))/(gg(gi(1))-gg(gi(0)))
for m=0,1 do begin
gl(*,m)=tl(0,*,m)+l*(tl(1,*,m)-tl(0,*,m))
gn(*,m)=tn(0,*,m)+l*(tn(1,*,m)-tn(0,*,m))
endfor

;Interpolate in microturbulence x2
xl=fltarr(nr)
xn=fltarr(nr)
if xi(1) eq xi(0) then l=0 else l=(x-xg(xi(0)))/(xg(xi(1))-xg(xi(0)))
xl=gl(*,0)+l*(gl(*,1)-gl(*,0))
xn=gn(*,0)+l*(gn(*,1)-gn(*,0))

;If LTE abundance is set find equivalent width from LTE curve-of-growth...
if keyword_set(al) then begin 
   if fi(1) eq fi(0) then l=0 else l=(f-mg(fi(0)))/(mg(fi(1))-mg(fi(0)))
   al=f 
   e=10^(xl(fi(0))+l*(xl(fi(1))-xl(fi(0))))
endif else begin
   
;...otherwise find LTE abundance from LTE curve-of-growth
   il=find_index(xl,alog10(e))
   if il(0) eq -1 then begin
      if not keyword_set(silent) then print,'Equivalent width outside range of LTE curve-of-growth'
      al=-9 
   endif else begin
      if il(0) eq il(1) then l=0 else l=(alog10(e)-xl(il(0)))/(xl(il(1))-xl(il(0)))
      al=mg(il(0))+l*(mg(il(1))-mg(il(0)))
   endelse
endelse

;Find NLTE abundance from NLTE curve-of-growth
in=find_index(xn,alog10(e))
if in(0) eq -1 then begin
   if not keyword_set(silent) then  print,'Equivalent width outside range of NLTE curve-of-growth'
   an=-9 
endif else begin
   if in(0) eq in(1) then l=0 else l=(alog10(e)-xn(in(0)))/(xn(in(1))-xn(in(0)))
   an=mg(in(0))+l*(mg(in(1))-mg(in(0)))
endelse

if al eq -9 or an eq -9 then co=-9 else co=an-al

return,[al,an,co]

END
